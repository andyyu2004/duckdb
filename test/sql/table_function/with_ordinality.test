# name: test/sql/table_function/with_ordinality.test
# description: Test duckdb table function WITH ORDINALITY
# group: [table_function]

require parquet

statement ok
PRAGMA enable_verification

query II
SELECT * FROM unnest([2, 3, 4, NULL]) WITH ORDINALITY
----
2	1
3	2
4	3
NULL	4

query II
SELECT x, ord FROM unnest([2, 3, 4, NULL]) WITH ORDINALITY AS t(x, ord)
----
2	1
3	2
4	3
NULL	4

query II
SELECT * FROM repeat(42, 0) WITH ORDINALITY
----

query II
SELECT * FROM repeat(42, 1) WITH ORDINALITY
----
42	1

query II
SELECT * FROM repeat(42, 3) WITH ORDINALITY WHERE ordinality > 1
----
42	2
42	3

query II
SELECT * FROM range(0, 3) WITH ORDINALITY
----
0	1
1	2
2	3

# tests the long path of `PhysicalTableInOutFunction::Execute`
query III
SELECT * FROM (SELECT [2, 3, 4]) t(l), UNNEST(l) WITH ORDINALITY t2(k, ord) ORDER BY k;
----
[2, 3, 4]	2	1
[2, 3, 4]	3	2
[2, 3, 4]	4	3

# range with a single parameter
query II
SELECT * from range(3) WITH ORDINALITY;
----
0	1
1	2
2	3

query II
SELECT * from generate_series(3) WITH ORDINALITY;
----
0	1
1	2
2	3
3	4

query II
SELECT range(CASE WHEN i%2=0 THEN NULL ELSE i END),e FROM range(6) WITH ORDINALITY tbl(i,e);
----
NULL	1
[0]	2
NULL	3
[0, 1, 2]	4
NULL	5
[0, 1, 2, 3, 4]	6

query II
SELECT * from range(0) WITH ORDINALITY;
----

query II
SELECT * from range(NULL) WITH ORDINALITY;
----


# range with two parameters
query II
SELECT * from range(1, 4) WITH ORDINALITY;
----
1	1
2	2
3	3

query II
SELECT * from generate_series(1, 3) WITH ORDINALITY;
----
1	1
2	2
3	3

query II
SELECT * from range(1, 1) WITH ORDINALITY;
----


query II
SELECT * from range(-10, -5) WITH ORDINALITY;
----
-10	1
-9	2
-8	3
-7	4
-6	5

query II
SELECT range(i, 5),e FROM range(5) WITH ORDINALITY tbl(i,e);
----
[0, 1, 2, 3, 4]	1
[1, 2, 3, 4]	2
[2, 3, 4]	3
[3, 4]	4
[4]	5

# range with 3 parameters
query II
SELECT * from range(1, 6, 2) WITH ORDINALITY;
----
1	1
3	2
5	3

query II
SELECT * from generate_series(1, 6, 2) WITH ORDINALITY;
----
1	1
3	2
5	3

# test basic repeat usage
query II
SELECT * FROM repeat(0, 3) WITH ORDINALITY
----
0	1
0	2
0	3

# NULL
query II
SELECT * FROM repeat(NULL, 2) WITH ORDINALITY
----
NULL	1
NULL	2

# varchar
query II
SELECT * FROM repeat('hello', 2) WITH ORDINALITY
----
hello	1
hello	2

# long varchar
query II
SELECT * FROM repeat('thisisalongstring', 2) WITH ORDINALITY
----
thisisalongstring	1
thisisalongstring	2

# blob
query II
SELECT * FROM repeat(blob '\x00\x00hello', 2) WITH ORDINALITY
----
\x00\x00hello	1
\x00\x00hello	2

# many values, make sure that the count keeps increasing after new data chunk is reached
query II
SELECT * FROM repeat(1, 10000) WITH ORDINALITY
----
20000 values hashing to 1b3aea7f442ebe14eefecd1dbc1dbc16

# date
query II
SELECT * FROM repeat(DATE '1992-01-01', 2) WITH ORDINALITY
----
1992-01-01	1
1992-01-01	2

# interval
query II
SELECT * FROM repeat(INTERVAL '30 days', 2) WITH ORDINALITY
----
30 days	1
30 days	2

query IIII
SELECT * FROM repeat_row(1, 2, 'foo', num_rows=3) WITH ORDINALITY
----
1	2	foo	1
1	2	foo	2
1	2	foo	3

# separate ordinals per input table
# consistent behaviour as postgres
query II
SELECT u, ordinality
FROM   (SELECT range(3) UNION SELECT range(3, 5)) AS _(l),
       unnest(l) WITH ORDINALITY AS __(u)
ORDER BY l, u
----
0	1
1	2
2	3
3	1
4	2

statement ok
COPY (SELECT * FROM range(0, 4) WITH ORDINALITY AS _(i, ord)) TO '__TEST_DIR__/output.parquet'

query II
SELECT * FROM read_parquet('__TEST_DIR__/output.parquet') WITH ORDINALITY
----
0	1	1
1	2	2
2	3	3
3	4	4

statement ok
COPY (SELECT * FROM range(0, 4)) TO '__TEST_DIR__/output1.csv' (HEADER, DELIMITER ',')

query II
SELECT * FROM read_csv_auto('__TEST_DIR__/output1.csv') WITH ORDINALITY
----
0	1
1	2
2	3
3	4

statement ok
COPY (SELECT * FROM range(4, 6)) TO '__TEST_DIR__/output2.csv' (HEADER, DELIMITER ',')

# ordinality should not reset when reading from multiple files
query II
SELECT * FROM read_csv_auto('__TEST_DIR__/output*.csv') WITH ORDINALITY
----
0	1
1	2
2	3
3	4
4	5
5	6

statement ok
COPY (SELECT * FROM range(0, 4) WITH ORDINALITY) TO '__TEST_DIR__/output.csv' (HEADER, DELIMITER ',')

query III
SELECT * FROM read_csv_auto('__TEST_DIR__/output.csv') WITH ORDINALITY
----
0	1	1
1	2	2
2	3	3
3	4	4

query IIII
SELECT * FROM repeat_row(1, 2, 'foo', num_rows=3) WITH ORDINALITY
----
1	2	foo	1
1	2	foo	2
1	2	foo	3

query II
SELECT string_split(p, '/'), ord FROM glob('test/sql/copy/csv/data/glob/a?/a2.csv') WITH ORDINALITY _(p, ord)
----
[test, sql, copy, csv, data, glob, a2, a2.csv]	1

query II
SELECT string_split(p, '/'), ord FROM glob('test/sql/copy/csv/data/glob/a*/*.csv') WITH ORDINALITY _(p, ord)
----
[test, sql, copy, csv, data, glob, a1, a1.csv]	1
[test, sql, copy, csv, data, glob, a2, a2.csv]	2
[test, sql, copy, csv, data, glob, a3, b1.csv]	3

query II
SELECT * FROM unnest([2, 3, NULL]) WITH ORDINALITY ORDER BY ordinality DESC
----
NULL	3
3	2
2	1

query II
SELECT SUM(i), ord FROM unnest([2, 3, NULL]) WITH ORDINALITY t(i, ord) GROUP BY ord ORDER BY ord DESC
----
NULL	3
3	2
2	1

query III
SELECT * FROM (VALUES ([2, 3, 4]), ([5, 6])) AS t(ids), unnest(ids) WITH ORDINALITY _(id, ord) ORDER BY id, ord;
----
[2, 3, 4]	2	1
[2, 3, 4]	3	2
[2, 3, 4]	4	3
[5, 6]	5	1
[5, 6]	6	2

query IIII
SELECT * FROM unnest([2, NULL]) WITH ORDINALITY AS t, unnest([3, NULL]) WITH ORDINALITY AS u WHERE t.ordinality = u.ordinality
----
2	1	3	1
NULL	2	NULL	2

query II
SELECT * FROM unnest((SELECT [2, 3, 4])) WITH ORDINALITY
----
2	1
3	2
4	3
